"""
#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
import tf2_ros
from tf2_msgs.msg import TFMessage

class TFListenerNode(Node):
    def __init__(self):
        super().__init__('tf_listener_node')

        # Create a TF2 buffer and listener
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer, self)

        # Subscribe to the transform topic
        self.subscription = self.create_subscription(
            TFMessage,
            '/tf',  # Make sure this is the correct topic for TF messages
            self.tf_callback,
            10
        )

        self.counter = 0
        self.counter_0 = 0
        self.counter_111 = 0
        self.counter_222 = 0

    def tf_callback(self, tf_msg: TFMessage):
        # Process each transform in the TFMessage
        for transform in tf_msg.transforms:
            try:

                # Check the child frame ID
                if transform.child_frame_id == 'marker_0':
                    self.get_logger().info(f"Transform from camera to marker_0:\n"
                                            f"Translation: {transform.transform.translation}\n"
                                            f"Rotation: {transform.transform.rotation}")
                    self.counter_0 += 1

                elif transform.child_frame_id == 'marker_111':
                    self.get_logger().info(f"Transform from camera to marker_111:\n"
                                           f"Translation: {transform.transform.translation}\n"
                                           f"Rotation: {transform.transform.rotation}")
                    self.counter_111 += 1

                elif transform.child_frame_id == 'marker_222':
                    self.get_logger().info(f"Transform from camera to marker_222:\n"
                                           f"Translation: {transform.transform.translation}\n"
                                           f"Rotation: {transform.transform.rotation}")
                    self.counter_222 += 1

                self.counter += 1
                self.get_logger().info(f"Transform count: {self.counter}, marker_0: {self.counter_0}, marker_111: {self.counter_111}, marker_222: {self.counter_222}")

            except Exception as e:
                self.get_logger().error(f"Could not process transform: {e}")

def main(args=None):
    rclpy.init(args=args)
    node = TFListenerNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
"""